package main

import (
	"meteo_des_aeroports/internal/handlers"
	"net/http"

	_ "meteo_des_aeroports/cmd/httpServer/docs" // docs is generated by Swag CLI, you have to import it.

	echo "github.com/labstack/echo/v4"                  // The API framework Echo: High performance, extensible, minimalist Go web framework
	middleware "github.com/labstack/echo/v4/middleware" // Middleware functions : having access to req and res objects (t execute any code, change req and res) and call the next middleware function.
	echoSwagger "github.com/swaggo/echo-swagger"        // echo-swagger middleware
)

// @title Meteo des aéroports API
// @version 1.0
// @description Une API pour récupérer les données des sondes de différents aéroports.
// @termsOfService http://swagger.io/terms/

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
// @schemes http
func main() {

	router := echo.New()

	//A new route for SwaggerUI.
	router.GET("/swagger/*", echoSwagger.WrapHandler)
	// Logging information about each HTTP request.
	router.Use(middleware.Logger())
	// Recovering from panics anywhere in the chain, prints stack trace and handles the control to the centralized HTTPErrorHandler.
	router.Use(middleware.Recover())
	// Giving web servers cross-domain access controls, which enable secure cross-domain data transfers.
	router.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"http://localhost:3000"},
		AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
	}))
	router.GET("/swagger/*", echoSwagger.WrapHandler)
	router.GET("/", HealthCheck)

	router.GET("/", func(c echo.Context) error {
		// handlers.GetValueOfDataTypeWithRange("NYC", "-inf", "+inf", "temperature")
		return c.String(http.StatusOK, "Welcome!")
	})

	router.GET("/iata", AllIATA)

	router.GET("/iata/:IATA/probes", DataWithRange)

	router.GET("/iata/:IATA/probes/average", DataAverageOfADay)

	router.Logger.Fatal(router.Start(":8080"))
}

// HealthCheck godoc
// @Summary Show the status of server.
// @Description get the status of server.
// @Tags root
// @Accept */*
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router / [get]
func HealthCheck(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"data": "Server is up and running",
	})
}

// @Summary Get all IATA available in the database
// @Description List iata airport
// @Tags root
// @Accept */*
// @Produce application/json
// @Success 200 {object} [string]
// @Router /iata [get]
func AllIATA(c echo.Context) error {
	result, err := handlers.GetIATA()

	if err != nil {
		return c.String(http.StatusBadRequest, err.Error())
	}

	return c.String(http.StatusOK, result)
}

// @Summary Get Data for specific range and datatype
// @Description List measurement of specific type within range
// @Tags root
// @Accept */*
// @Produce application/json
// @Param iata path string true "IATA code of an airport"
// @Param start query int false "Start of range in UNIX format"
// @Param end query integer false "End of range in UNIX format"
// @Param dataType query string true "specific type"
// @Success 200 {object} map[string][]interface{}
// @Router /iata/{iata}/probes [get]
func DataWithRange(c echo.Context) error {
	iata := c.Param("IATA")
	start := c.QueryParam("start")

	if start == "" {
		start = "-inf"
	}

	end := c.QueryParam("end")

	if end == "" {
		end = "+inf"
	}

	dataType := c.QueryParam("dataType")

	if dataType == "" {
		return c.String(http.StatusBadRequest, "dataType is required")
	}

	result, err := handlers.GetValueOfDataTypeWithRange(iata, start, end, dataType)

	if err != nil {
		return c.String(http.StatusBadRequest, err.Error())
	}

	return c.String(http.StatusOK, result)
}

// @Summary Get the average of the data of a specific day
// @Description Gives the average of all probes of an airport for each datatype for a day
// @Tags root
// @Accept */*
// @Produce application/json
// @Param iata path string true "IATA code of an airport"
// @Param date query string false "the date of a specific day"
// @Success 200 {object} map[string]float64
// @Router /iata/{iata}/probes/average [get]
func DataAverageOfADay(c echo.Context) error {
	iata := c.Param("IATA")

	date := c.QueryParam("date")

	var result string
	var errAverage error

	result, errAverage = handlers.GetAverageValueOfTheDay(iata, date)

	if errAverage != nil {
		return c.String(http.StatusBadRequest, errAverage.Error())
	}

	return c.String(http.StatusOK, result)
}
